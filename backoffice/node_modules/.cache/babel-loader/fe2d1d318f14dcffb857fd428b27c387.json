{"ast":null,"code":"var _jsxFileName = \"/Users/teem/Developer/lampang-myspace/backoffice/src/_metronic/_partials/controls/Card.js\";\nimport React, { forwardRef, useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport { isFragment } from \"react-is\";\nexport const CardHeaderIcon = forwardRef(({\n  className\n}, ref) => /*#__PURE__*/React.createElement(\"span\", {\n  ref: ref,\n  className: clsx(\"card-head-icon\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}));\nexport const CardHeaderTitle = forwardRef(({\n  className,\n  ...props\n}, ref) =>\n/*#__PURE__*/\n// eslint-disable-next-line jsx-a11y/heading-has-content\nReact.createElement(\"h3\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"card-label\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }\n})));\nexport const CardHeaderToolbar = forwardRef(({\n  children,\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"card-toolbar\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }\n}), children));\nexport const CardHeader = forwardRef(({\n  children,\n  icon,\n  title,\n  toolbar,\n  className,\n  sticky = false,\n  labelRef,\n  ...props\n}, ref) => {\n  const [top, setTop] = useState(0);\n  const [windowHeight, setWindowHeight] = useState(0);\n  useEffect(() => {\n    handleResize();\n\n    function handleResize() {\n      setWindowHeight(window.innerWidth);\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  });\n  useEffect(() => {\n    // Skip if sticky is disabled or on initial render when we don't know about window height.\n    if (!sticky || windowHeight === 0) {\n      return;\n    }\n\n    const headerElement = document.querySelector(\".header\");\n    const subheaderElement = document.querySelector(\".subheader\");\n    const headerMobileElement = document.querySelector(\".header-mobile\");\n    let nextMarginTop = 0; // mobile header\n\n    if (window.getComputedStyle(headerElement).height === \"0px\") {\n      nextMarginTop = headerMobileElement.offsetHeight;\n    } else {\n      // desktop header\n      if (document.body.classList.contains(\"header-minimize-topbar\")) {\n        // hardcoded minimized header height\n        nextMarginTop = 60;\n      } else {\n        // normal fixed header\n        if (document.body.classList.contains(\"header-fixed\")) {\n          nextMarginTop += headerElement.offsetHeight;\n        }\n\n        if (document.body.classList.contains(\"subheader-fixed\")) {\n          nextMarginTop += subheaderElement.offsetHeight;\n        }\n      }\n    }\n\n    setTop(nextMarginTop);\n  }, [sticky, windowHeight]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    className: \"card-header\",\n    style: !sticky ? undefined : {\n      top,\n      position: \"sticky\",\n      backgroundColor: \"#fff\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, title != null && /*#__PURE__*/React.createElement(\"div\", {\n    ref: labelRef,\n    className: clsx(\"card-title\", className),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, icon,\n  /* Wrap string and fragments in CardHeaderTitle */\n  typeof title === \"string\" || isFragment(title) ? /*#__PURE__*/React.createElement(CardHeaderTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, title) : title), toolbar, children);\n});\nexport const CardBody = forwardRef(({\n  fit,\n  fluid,\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"card-body\", {\n    \"card-body-fit\": fit,\n    \"card-body-fluid\": fluid\n  }, className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }\n})));\nexport const CardFooter = forwardRef(({\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"card-footer\", className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 3\n  }\n})));\nexport const Card = forwardRef(({\n  fluidHeight,\n  className,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, props, {\n  ref: ref,\n  className: clsx(\"card card-custom gutter-b\", {\n    \"card-height-fluid\": fluidHeight\n  }, className),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 3\n  }\n}))); // Set display names for debugging.\n\nif (process.env.NODE_ENV !== \"production\") {\n  Card.displayName = \"Card\";\n  CardHeader.displayName = \"CardHeader\";\n  CardHeaderIcon.displayName = \"CardHeaderIcon\";\n  CardHeaderTitle.displayName = \"CardHeaderTitle\";\n  CardHeaderToolbar.displayName = \"CardHeaderToolbar\";\n  CardBody.displayName = \"CardBody\";\n  CardFooter.displayName = \"CardFooter\";\n}","map":{"version":3,"sources":["/Users/teem/Developer/lampang-myspace/backoffice/src/_metronic/_partials/controls/Card.js"],"names":["React","forwardRef","useEffect","useState","clsx","isFragment","CardHeaderIcon","className","ref","CardHeaderTitle","props","CardHeaderToolbar","children","CardHeader","icon","title","toolbar","sticky","labelRef","top","setTop","windowHeight","setWindowHeight","handleResize","window","innerWidth","addEventListener","removeEventListener","headerElement","document","querySelector","subheaderElement","headerMobileElement","nextMarginTop","getComputedStyle","height","offsetHeight","body","classList","contains","undefined","position","backgroundColor","CardBody","fit","fluid","CardFooter","Card","fluidHeight","process","env","NODE_ENV","displayName"],"mappings":"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","sourcesContent":["import React, { forwardRef, useEffect, useState } from \"react\";\nimport clsx from \"clsx\";\nimport {isFragment} from \"react-is\";\n\nexport const CardHeaderIcon = forwardRef(({ className }, ref) => (\n  <span ref={ref} className={clsx(\"card-head-icon\", className)} />\n));\n\nexport const CardHeaderTitle = forwardRef(({ className, ...props }, ref) => (\n  // eslint-disable-next-line jsx-a11y/heading-has-content\n  <h3 {...props} ref={ref} className={clsx(\"card-label\", className)} />\n));\n\nexport const CardHeaderToolbar = forwardRef(\n  ({ children, className, ...props }, ref) => (\n    <div {...props} ref={ref} className={clsx(\"card-toolbar\", className)}>\n      {children}\n    </div>\n  )\n);\n\nexport const CardHeader = forwardRef(\n  (\n    {\n      children,\n      icon,\n      title,\n      toolbar,\n      className,\n      sticky = false,\n      labelRef,\n      ...props\n    },\n    ref\n  ) => {\n    const [top, setTop] = useState(0);\n    const [windowHeight, setWindowHeight] = useState(0);\n\n    useEffect(() => {\n      handleResize();\n\n      function handleResize() {\n        setWindowHeight(window.innerWidth);\n      }\n\n      window.addEventListener(\"resize\", handleResize);\n\n      return () => {\n        window.removeEventListener(\"resize\", handleResize);\n      };\n    });\n\n    useEffect(() => {\n      // Skip if sticky is disabled or on initial render when we don't know about window height.\n      if (!sticky || windowHeight === 0) {\n        return;\n      }\n\n      const headerElement = document.querySelector(\".header\");\n      const subheaderElement = document.querySelector(\".subheader\");\n      const headerMobileElement = document.querySelector(\".header-mobile\");\n\n      let nextMarginTop = 0;\n\n      // mobile header\n      if (window.getComputedStyle(headerElement).height === \"0px\") {\n        nextMarginTop = headerMobileElement.offsetHeight;\n      } else {\n        // desktop header\n        if (document.body.classList.contains(\"header-minimize-topbar\")) {\n          // hardcoded minimized header height\n          nextMarginTop = 60;\n        } else {\n          // normal fixed header\n          if (document.body.classList.contains(\"header-fixed\")) {\n            nextMarginTop += headerElement.offsetHeight;\n          }\n\n          if (document.body.classList.contains(\"subheader-fixed\")) {\n            nextMarginTop += subheaderElement.offsetHeight;\n          }\n        }\n      }\n\n      setTop(nextMarginTop);\n    }, [sticky, windowHeight]);\n\n    return (\n      <div\n        ref={ref}\n        className=\"card-header\"\n        style={\n          !sticky\n            ? undefined\n            : { top, position: \"sticky\", backgroundColor: \"#fff\" }\n        }\n      >\n        {title != null && (\n          <div ref={labelRef} className={clsx(\"card-title\", className)}>\n            {icon}\n\n            {/* Wrap string and fragments in CardHeaderTitle */\n            typeof title === \"string\" || isFragment(title) ? (\n              <CardHeaderTitle>{title}</CardHeaderTitle>\n            ) : (\n              title\n            )}\n          </div>\n        )}\n\n        {toolbar}\n        {children}\n      </div>\n    );\n  }\n);\n\nexport const CardBody = forwardRef(\n  ({ fit, fluid, className, ...props }, ref) => (\n    <div\n      {...props}\n      ref={ref}\n      className={clsx(\n        \"card-body\",\n        {\n          \"card-body-fit\": fit,\n          \"card-body-fluid\": fluid\n        },\n        className\n      )}\n    />\n  )\n);\n\nexport const CardFooter = forwardRef(({ className, ...props }, ref) => (\n  <div {...props} ref={ref} className={clsx(\"card-footer\", className)} />\n));\n\nexport const Card = forwardRef(({ fluidHeight, className, ...props }, ref) => (\n  <div\n    {...props}\n    ref={ref}\n    className={clsx(\n      \"card card-custom gutter-b\",\n      { \"card-height-fluid\": fluidHeight },\n      className\n    )}\n  />\n));\n\n// Set display names for debugging.\nif (process.env.NODE_ENV !== \"production\") {\n  Card.displayName = \"Card\";\n\n  CardHeader.displayName = \"CardHeader\";\n  CardHeaderIcon.displayName = \"CardHeaderIcon\";\n  CardHeaderTitle.displayName = \"CardHeaderTitle\";\n  CardHeaderToolbar.displayName = \"CardHeaderToolbar\";\n\n  CardBody.displayName = \"CardBody\";\n  CardFooter.displayName = \"CardFooter\";\n}\n"]},"metadata":{},"sourceType":"module"}