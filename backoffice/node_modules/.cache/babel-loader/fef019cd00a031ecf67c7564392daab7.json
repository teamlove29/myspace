{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport FormattedMessage from './message';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\n\nclass FormattedHTMLMessage extends FormattedMessage {\n  render() {\n    return React.createElement(Context.Consumer, null, intl => {\n      if (!this.props.defaultMessage) {\n        invariantIntlContext(intl);\n      }\n\n      const {\n        formatHTMLMessage,\n        textComponent\n      } = intl;\n      const {\n        id,\n        description,\n        defaultMessage,\n        values: rawValues,\n        children\n      } = this.props;\n      let {\n        tagName: Component\n      } = this.props; // This is bc of TS3.3 doesn't recognize `defaultProps`\n\n      if (!Component) {\n        Component = textComponent || 'span';\n      }\n\n      const descriptor = {\n        id,\n        description,\n        defaultMessage\n      };\n      const formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);\n\n      if (typeof children === 'function') {\n        return children(formattedHTMLMessage);\n      } // Since the message presumably has HTML in it, we need to set\n      // `innerHTML` in order for it to be rendered and not escaped by React.\n      // To be safe, all string prop values were escaped when formatting the\n      // message. It is assumed that the message is not UGC, and came from the\n      // developer making it more like a template.\n      //\n      // Note: There's a perf impact of using this component since there's no\n      // way for React to do its virtual DOM diffing.\n\n\n      const html = {\n        __html: formattedHTMLMessage\n      };\n      return React.createElement(Component, {\n        dangerouslySetInnerHTML: html\n      });\n    });\n  }\n\n}\n\nFormattedHTMLMessage.displayName = 'FormattedHTMLMessage';\nFormattedHTMLMessage.defaultProps = Object.assign({}, FormattedMessage.defaultProps, {\n  tagName: 'span'\n});\nexport default FormattedHTMLMessage;","map":{"version":3,"sources":["/Users/teem/Developer/lampang-myspace/backoffice/node_modules/react-intl/lib/components/html-message.js"],"names":["React","FormattedMessage","Context","invariantIntlContext","FormattedHTMLMessage","render","createElement","Consumer","intl","props","defaultMessage","formatHTMLMessage","textComponent","id","description","values","rawValues","children","tagName","Component","descriptor","formattedHTMLMessage","html","__html","dangerouslySetInnerHTML","displayName","defaultProps","Object","assign"],"mappings":"AAAA;;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,gBAAP,MAA6B,WAA7B;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,oBAAT,QAAqC,UAArC;;AACA,MAAMC,oBAAN,SAAmCH,gBAAnC,CAAoD;AAChDI,EAAAA,MAAM,GAAG;AACL,WAAQL,KAAK,CAACM,aAAN,CAAoBJ,OAAO,CAACK,QAA5B,EAAsC,IAAtC,EAA6CC,IAAD,IAAU;AAC1D,UAAI,CAAC,KAAKC,KAAL,CAAWC,cAAhB,EAAgC;AAC5BP,QAAAA,oBAAoB,CAACK,IAAD,CAApB;AACH;;AACD,YAAM;AAAEG,QAAAA,iBAAF;AAAqBC,QAAAA;AAArB,UAAuCJ,IAA7C;AACA,YAAM;AAAEK,QAAAA,EAAF;AAAMC,QAAAA,WAAN;AAAmBJ,QAAAA,cAAnB;AAAmCK,QAAAA,MAAM,EAAEC,SAA3C;AAAsDC,QAAAA;AAAtD,UAAoE,KAAKR,KAA/E;AACA,UAAI;AAAES,QAAAA,OAAO,EAAEC;AAAX,UAAyB,KAAKV,KAAlC,CAN0D,CAO1D;;AACA,UAAI,CAACU,SAAL,EAAgB;AACZA,QAAAA,SAAS,GAAGP,aAAa,IAAI,MAA7B;AACH;;AACD,YAAMQ,UAAU,GAAG;AAAEP,QAAAA,EAAF;AAAMC,QAAAA,WAAN;AAAmBJ,QAAAA;AAAnB,OAAnB;AACA,YAAMW,oBAAoB,GAAGV,iBAAiB,CAACS,UAAD,EAAaJ,SAAb,CAA9C;;AACA,UAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAChC,eAAOA,QAAQ,CAACI,oBAAD,CAAf;AACH,OAfyD,CAgB1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAMC,IAAI,GAAG;AAAEC,QAAAA,MAAM,EAAEF;AAAV,OAAb;AACA,aAAOrB,KAAK,CAACM,aAAN,CAAoBa,SAApB,EAA+B;AAAEK,QAAAA,uBAAuB,EAAEF;AAA3B,OAA/B,CAAP;AACH,KA1BO,CAAR;AA2BH;;AA7B+C;;AA+BpDlB,oBAAoB,CAACqB,WAArB,GAAmC,sBAAnC;AACArB,oBAAoB,CAACsB,YAArB,GAAoCC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB3B,gBAAgB,CAACyB,YAAnC,EAAiD;AAAER,EAAAA,OAAO,EAAE;AAAX,CAAjD,CAApC;AACA,eAAed,oBAAf","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport FormattedMessage from './message';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nclass FormattedHTMLMessage extends FormattedMessage {\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            if (!this.props.defaultMessage) {\n                invariantIntlContext(intl);\n            }\n            const { formatHTMLMessage, textComponent } = intl;\n            const { id, description, defaultMessage, values: rawValues, children, } = this.props;\n            let { tagName: Component } = this.props;\n            // This is bc of TS3.3 doesn't recognize `defaultProps`\n            if (!Component) {\n                Component = textComponent || 'span';\n            }\n            const descriptor = { id, description, defaultMessage };\n            const formattedHTMLMessage = formatHTMLMessage(descriptor, rawValues);\n            if (typeof children === 'function') {\n                return children(formattedHTMLMessage);\n            }\n            // Since the message presumably has HTML in it, we need to set\n            // `innerHTML` in order for it to be rendered and not escaped by React.\n            // To be safe, all string prop values were escaped when formatting the\n            // message. It is assumed that the message is not UGC, and came from the\n            // developer making it more like a template.\n            //\n            // Note: There's a perf impact of using this component since there's no\n            // way for React to do its virtual DOM diffing.\n            const html = { __html: formattedHTMLMessage };\n            return React.createElement(Component, { dangerouslySetInnerHTML: html });\n        }));\n    }\n}\nFormattedHTMLMessage.displayName = 'FormattedHTMLMessage';\nFormattedHTMLMessage.defaultProps = Object.assign({}, FormattedMessage.defaultProps, { tagName: 'span' });\nexport default FormattedHTMLMessage;\n"]},"metadata":{},"sourceType":"module"}