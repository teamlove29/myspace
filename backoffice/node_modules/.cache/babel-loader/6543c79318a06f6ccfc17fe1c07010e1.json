{"ast":null,"code":"var _jsxFileName = \"/Users/teem/Developer/lampang-myspace/backoffice/src/_metronic/layout/_core/MetronicSplashScreen.js\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nconst MetronicSplashScreenContext = createContext();\nexport function MetronicSplashScreenProvider({\n  children\n}) {\n  const [count, setCount] = useState(0);\n  let visible = count > 0;\n  useEffect(() => {\n    const splashScreen = document.getElementById(\"splash-screen\"); // Show SplashScreen\n\n    if (splashScreen && visible) {\n      splashScreen.classList.remove(\"hidden\");\n      return () => {\n        splashScreen.classList.add(\"hidden\");\n      };\n    } // Hide SplashScreen\n\n\n    let timeout;\n\n    if (splashScreen && !visible) {\n      timeout = setTimeout(() => {\n        splashScreen.classList.add(\"hidden\");\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [visible]);\n  return /*#__PURE__*/React.createElement(MetronicSplashScreenContext.Provider, {\n    value: setCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function LayoutSplashScreen({\n  visible = true\n}) {\n  // Everything are ready - remove splashscreen\n  const setCount = useContext(MetronicSplashScreenContext);\n  useEffect(() => {\n    if (!visible) {\n      return;\n    }\n\n    setCount(prev => {\n      return prev + 1;\n    });\n    return () => {\n      setCount(prev => {\n        return prev - 1;\n      });\n    };\n  }, [setCount, visible]);\n  return null;\n}","map":{"version":3,"sources":["/Users/teem/Developer/lampang-myspace/backoffice/src/_metronic/layout/_core/MetronicSplashScreen.js"],"names":["React","createContext","useContext","useState","useEffect","MetronicSplashScreenContext","MetronicSplashScreenProvider","children","count","setCount","visible","splashScreen","document","getElementById","classList","remove","add","timeout","setTimeout","clearTimeout","LayoutSplashScreen","prev"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,EAA0CC,QAA1C,EAAoDC,SAApD,QAAoE,OAApE;AAEA,MAAMC,2BAA2B,GAAGJ,aAAa,EAAjD;AAEA,OAAO,SAASK,4BAAT,CAAsC;AAAEC,EAAAA;AAAF,CAAtC,EAAoD;AACzD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,CAAD,CAAlC;AACA,MAAIO,OAAO,GAAGF,KAAK,GAAG,CAAtB;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CAArB,CADc,CAGd;;AACA,QAAIF,YAAY,IAAID,OAApB,EAA6B;AAC3BC,MAAAA,YAAY,CAACG,SAAb,CAAuBC,MAAvB,CAA8B,QAA9B;AAEA,aAAO,MAAM;AACXJ,QAAAA,YAAY,CAACG,SAAb,CAAuBE,GAAvB,CAA2B,QAA3B;AACD,OAFD;AAGD,KAVa,CAYd;;;AACA,QAAIC,OAAJ;;AACA,QAAIN,YAAY,IAAI,CAACD,OAArB,EAA8B;AAC5BO,MAAAA,OAAO,GAAGC,UAAU,CAAC,MAAM;AACzBP,QAAAA,YAAY,CAACG,SAAb,CAAuBE,GAAvB,CAA2B,QAA3B;AACD,OAFmB,EAEjB,IAFiB,CAApB;AAGD;;AAED,WAAO,MAAM;AACXG,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACD,KAFD;AAGD,GAvBQ,EAuBN,CAACP,OAAD,CAvBM,CAAT;AAyBA,sBACE,oBAAC,2BAAD,CAA6B,QAA7B;AAAsC,IAAA,KAAK,EAAED,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,QADH,CADF;AAKD;AAED,OAAO,SAASa,kBAAT,CAA4B;AAAEV,EAAAA,OAAO,GAAG;AAAZ,CAA5B,EAAgD;AACrD;AACA,QAAMD,QAAQ,GAAGP,UAAU,CAACG,2BAAD,CAA3B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACM,OAAL,EAAc;AACZ;AACD;;AAEDD,IAAAA,QAAQ,CAACY,IAAI,IAAI;AACf,aAAOA,IAAI,GAAG,CAAd;AACD,KAFO,CAAR;AAIA,WAAO,MAAM;AACXZ,MAAAA,QAAQ,CAACY,IAAI,IAAI;AACf,eAAOA,IAAI,GAAG,CAAd;AACD,OAFO,CAAR;AAGD,KAJD;AAKD,GAdQ,EAcN,CAACZ,QAAD,EAAWC,OAAX,CAdM,CAAT;AAgBA,SAAO,IAAP;AACD","sourcesContent":["import React, {createContext, useContext, useState, useEffect} from \"react\";\n\nconst MetronicSplashScreenContext = createContext();\n\nexport function MetronicSplashScreenProvider({ children }) {\n  const [count, setCount] = useState(0);\n  let visible = count > 0;\n\n  useEffect(() => {\n    const splashScreen = document.getElementById(\"splash-screen\");\n\n    // Show SplashScreen\n    if (splashScreen && visible) {\n      splashScreen.classList.remove(\"hidden\");\n\n      return () => {\n        splashScreen.classList.add(\"hidden\");\n      };\n    }\n\n    // Hide SplashScreen\n    let timeout;\n    if (splashScreen && !visible) {\n      timeout = setTimeout(() => {\n        splashScreen.classList.add(\"hidden\");\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [visible]);\n\n  return (\n    <MetronicSplashScreenContext.Provider value={setCount}>\n      {children}\n    </MetronicSplashScreenContext.Provider>\n  );\n}\n\nexport function LayoutSplashScreen({ visible = true }) {\n  // Everything are ready - remove splashscreen\n  const setCount = useContext(MetronicSplashScreenContext);\n\n  useEffect(() => {\n    if (!visible) {\n      return;\n    }\n\n    setCount(prev => {\n      return prev + 1;\n    });\n\n    return () => {\n      setCount(prev => {\n        return prev - 1;\n      });\n    };\n  }, [setCount, visible]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}