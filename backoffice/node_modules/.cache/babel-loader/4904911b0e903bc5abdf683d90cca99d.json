{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { formatMessage } from '../formatters/message';\nimport { invariantIntlContext, DEFAULT_INTL_CONFIG, createFormatters } from '../utils';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\n\nconst defaultFormatMessage = (descriptor, values) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.error('[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry. Using default message as fallback.');\n  }\n\n  return formatMessage(Object.assign({}, DEFAULT_INTL_CONFIG, {\n    locale: 'en'\n  }), createFormatters(), descriptor, values);\n};\n\nclass FormattedMessage extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    const _a = this.props,\n          {\n      values\n    } = _a,\n          otherProps = __rest(_a, [\"values\"]);\n\n    const {\n      values: nextValues\n    } = nextProps,\n          nextOtherProps = __rest(nextProps, [\"values\"]);\n\n    return !shallowEquals(nextValues, values) || !shallowEquals(otherProps, nextOtherProps);\n  }\n\n  render() {\n    return React.createElement(Context.Consumer, null, intl => {\n      if (!this.props.defaultMessage) {\n        invariantIntlContext(intl);\n      }\n\n      const {\n        formatMessage = defaultFormatMessage,\n        textComponent: Text = React.Fragment\n      } = intl || {};\n      const {\n        id,\n        description,\n        defaultMessage,\n        values,\n        children,\n        tagName: Component = Text\n      } = this.props;\n      const descriptor = {\n        id,\n        description,\n        defaultMessage\n      };\n      let nodes = formatMessage(descriptor, values);\n\n      if (!Array.isArray(nodes)) {\n        nodes = [nodes];\n      }\n\n      if (typeof children === 'function') {\n        return children(...nodes);\n      }\n\n      if (Component) {\n        // Needs to use `createElement()` instead of JSX, otherwise React will\n        // warn about a missing `key` prop with rich-text message formatting.\n        return React.createElement(Component, null, ...nodes);\n      }\n\n      return nodes;\n    });\n  }\n\n}\n\nFormattedMessage.displayName = 'FormattedMessage';\nFormattedMessage.defaultProps = {\n  values: {}\n};\nexport default FormattedMessage;","map":{"version":3,"sources":["/Users/teem/Developer/lampang-myspace/backoffice/node_modules/react-intl/lib/components/message.js"],"names":["__rest","s","e","t","p","Object","prototype","hasOwnProperty","call","indexOf","getOwnPropertySymbols","i","length","React","Context","formatMessage","invariantIntlContext","DEFAULT_INTL_CONFIG","createFormatters","shallowEquals_","shallowEquals","default","defaultFormatMessage","descriptor","values","process","env","NODE_ENV","console","error","assign","locale","FormattedMessage","Component","shouldComponentUpdate","nextProps","_a","props","otherProps","nextValues","nextOtherProps","render","createElement","Consumer","intl","defaultMessage","textComponent","Text","Fragment","id","description","children","tagName","nodes","Array","isArray","displayName","defaultProps"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport * as React from 'react';\nimport { Context } from './injectIntl';\nimport { formatMessage } from '../formatters/message';\nimport { invariantIntlContext, DEFAULT_INTL_CONFIG, createFormatters, } from '../utils';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nconst shallowEquals = shallowEquals_.default || shallowEquals_;\nconst defaultFormatMessage = (descriptor, values) => {\n    if (process.env.NODE_ENV !== 'production') {\n        console.error('[React Intl] Could not find required `intl` object. <IntlProvider> needs to exist in the component ancestry. Using default message as fallback.');\n    }\n    return formatMessage(Object.assign({}, DEFAULT_INTL_CONFIG, { locale: 'en' }), createFormatters(), descriptor, values);\n};\nclass FormattedMessage extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        const _a = this.props, { values } = _a, otherProps = __rest(_a, [\"values\"]);\n        const { values: nextValues } = nextProps, nextOtherProps = __rest(nextProps, [\"values\"]);\n        return (!shallowEquals(nextValues, values) ||\n            !shallowEquals(otherProps, nextOtherProps));\n    }\n    render() {\n        return (React.createElement(Context.Consumer, null, (intl) => {\n            if (!this.props.defaultMessage) {\n                invariantIntlContext(intl);\n            }\n            const { formatMessage = defaultFormatMessage, textComponent: Text = React.Fragment, } = intl || {};\n            const { id, description, defaultMessage, values, children, tagName: Component = Text, } = this.props;\n            const descriptor = { id, description, defaultMessage };\n            let nodes = formatMessage(descriptor, values);\n            if (!Array.isArray(nodes)) {\n                nodes = [nodes];\n            }\n            if (typeof children === 'function') {\n                return children(...nodes);\n            }\n            if (Component) {\n                // Needs to use `createElement()` instead of JSX, otherwise React will\n                // warn about a missing `key` prop with rich-text message formatting.\n                return React.createElement(Component, null, ...nodes);\n            }\n            return nodes;\n        }));\n    }\n}\nFormattedMessage.displayName = 'FormattedMessage';\nFormattedMessage.defaultProps = {\n    values: {},\n};\nexport default FormattedMessage;\n"]},"metadata":{},"sourceType":"module"}