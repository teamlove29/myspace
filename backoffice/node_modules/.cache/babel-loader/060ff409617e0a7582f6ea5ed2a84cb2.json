{"ast":null,"code":"import * as React from 'react';\nimport * as hoistNonReactStatics_ from 'hoist-non-react-statics'; // Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\n\nconst hoistNonReactStatics = hoistNonReactStatics_.default || hoistNonReactStatics_;\nimport { invariantIntlContext } from '../utils';\n\nfunction getDisplayName(Component) {\n  return Component.displayName || Component.name || 'Component';\n} // TODO: We should provide initial value here\n\n\nconst IntlContext = React.createContext(null);\nconst {\n  Consumer: IntlConsumer,\n  Provider: IntlProvider\n} = IntlContext;\nexport const Provider = IntlProvider;\nexport const Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n  const {\n    intlPropName = 'intl',\n    forwardRef = false,\n    enforceContext = true\n  } = options || {};\n\n  const WithIntl = props => React.createElement(IntlConsumer, null, intl => {\n    if (enforceContext) {\n      invariantIntlContext(intl);\n    }\n\n    return React.createElement(WrappedComponent, Object.assign({}, props, {\n      [intlPropName]: intl\n    }, {\n      ref: forwardRef ? props.forwardedRef : null\n    }));\n  });\n\n  WithIntl.displayName = `injectIntl(${getDisplayName(WrappedComponent)})`;\n  WithIntl.WrappedComponent = WrappedComponent;\n\n  if (forwardRef) {\n    return hoistNonReactStatics(React.forwardRef((props, ref) => React.createElement(WithIntl, Object.assign({}, props, {\n      forwardedRef: ref\n    }))), WrappedComponent);\n  }\n\n  return hoistNonReactStatics(WithIntl, WrappedComponent);\n}","map":{"version":3,"sources":["/Users/teem/Developer/lampang-myspace/backoffice/node_modules/react-intl/lib/components/injectIntl.js"],"names":["React","hoistNonReactStatics_","hoistNonReactStatics","default","invariantIntlContext","getDisplayName","Component","displayName","name","IntlContext","createContext","Consumer","IntlConsumer","Provider","IntlProvider","Context","injectIntl","WrappedComponent","options","intlPropName","forwardRef","enforceContext","WithIntl","props","createElement","intl","Object","assign","ref","forwardedRef"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,qBAAZ,MAAuC,yBAAvC,C,CACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAoB,GAAGD,qBAAqB,CAACE,OAAtB,IAAiCF,qBAA9D;AACA,SAASG,oBAAT,QAAqC,UAArC;;AACA,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AAC/B,SAAOA,SAAS,CAACC,WAAV,IAAyBD,SAAS,CAACE,IAAnC,IAA2C,WAAlD;AACH,C,CACD;;;AACA,MAAMC,WAAW,GAAGT,KAAK,CAACU,aAAN,CAAoB,IAApB,CAApB;AACA,MAAM;AAAEC,EAAAA,QAAQ,EAAEC,YAAZ;AAA0BC,EAAAA,QAAQ,EAAEC;AAApC,IAAqDL,WAA3D;AACA,OAAO,MAAMI,QAAQ,GAAGC,YAAjB;AACP,OAAO,MAAMC,OAAO,GAAGN,WAAhB;AACP,eAAe,SAASO,UAAT,CAAoBC,gBAApB,EAAsCC,OAAtC,EAA+C;AAC1D,QAAM;AAAEC,IAAAA,YAAY,GAAG,MAAjB;AAAyBC,IAAAA,UAAU,GAAG,KAAtC;AAA6CC,IAAAA,cAAc,GAAG;AAA9D,MAAuEH,OAAO,IAAI,EAAxF;;AACA,QAAMI,QAAQ,GAAGC,KAAK,IAAKvB,KAAK,CAACwB,aAAN,CAAoBZ,YAApB,EAAkC,IAAlC,EAAyCa,IAAD,IAAU;AACzE,QAAIJ,cAAJ,EAAoB;AAChBjB,MAAAA,oBAAoB,CAACqB,IAAD,CAApB;AACH;;AACD,WAAQzB,KAAK,CAACwB,aAAN,CAAoBP,gBAApB,EAAsCS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AACnE,OAACJ,YAAD,GAAgBM;AADmD,KAAzB,EAE3C;AAAEG,MAAAA,GAAG,EAAER,UAAU,GAAGG,KAAK,CAACM,YAAT,GAAwB;AAAzC,KAF2C,CAAtC,CAAR;AAGH,GAP0B,CAA3B;;AAQAP,EAAAA,QAAQ,CAACf,WAAT,GAAwB,cAAaF,cAAc,CAACY,gBAAD,CAAmB,GAAtE;AACAK,EAAAA,QAAQ,CAACL,gBAAT,GAA4BA,gBAA5B;;AACA,MAAIG,UAAJ,EAAgB;AACZ,WAAOlB,oBAAoB,CAACF,KAAK,CAACoB,UAAN,CAAiB,CAACG,KAAD,EAAQK,GAAR,KAAiB5B,KAAK,CAACwB,aAAN,CAAoBF,QAApB,EAA8BI,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAAEM,MAAAA,YAAY,EAAED;AAAhB,KAAzB,CAA9B,CAAlC,CAAD,EAAqHX,gBAArH,CAA3B;AACH;;AACD,SAAOf,oBAAoB,CAACoB,QAAD,EAAWL,gBAAX,CAA3B;AACH","sourcesContent":["import * as React from 'react';\nimport * as hoistNonReactStatics_ from 'hoist-non-react-statics';\n// Since rollup cannot deal with namespace being a function,\n// this is to interop with TypeScript since `invariant`\n// does not export a default\n// https://github.com/rollup/rollup/issues/1267\nconst hoistNonReactStatics = hoistNonReactStatics_.default || hoistNonReactStatics_;\nimport { invariantIntlContext } from '../utils';\nfunction getDisplayName(Component) {\n    return Component.displayName || Component.name || 'Component';\n}\n// TODO: We should provide initial value here\nconst IntlContext = React.createContext(null);\nconst { Consumer: IntlConsumer, Provider: IntlProvider } = IntlContext;\nexport const Provider = IntlProvider;\nexport const Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n    const { intlPropName = 'intl', forwardRef = false, enforceContext = true } = options || {};\n    const WithIntl = props => (React.createElement(IntlConsumer, null, (intl) => {\n        if (enforceContext) {\n            invariantIntlContext(intl);\n        }\n        return (React.createElement(WrappedComponent, Object.assign({}, props, {\n            [intlPropName]: intl,\n        }, { ref: forwardRef ? props.forwardedRef : null })));\n    }));\n    WithIntl.displayName = `injectIntl(${getDisplayName(WrappedComponent)})`;\n    WithIntl.WrappedComponent = WrappedComponent;\n    if (forwardRef) {\n        return hoistNonReactStatics(React.forwardRef((props, ref) => (React.createElement(WithIntl, Object.assign({}, props, { forwardedRef: ref })))), WrappedComponent);\n    }\n    return hoistNonReactStatics(WithIntl, WrappedComponent);\n}\n"]},"metadata":{},"sourceType":"module"}