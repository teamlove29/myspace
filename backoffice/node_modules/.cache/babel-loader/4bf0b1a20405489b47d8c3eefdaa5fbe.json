{"ast":null,"code":"var _jsxFileName = \"/Users/teem/Developer/lampang-myspace/backoffice/src/routes/Routes.js\";\nimport React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport history from \"../utils/history\";\nimport { Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport AuthPage from \"../pages/auth/AuthPage\";\nimport Logout from \"../pages/auth/Logout\";\nimport NotFound from \"../pages/NotFound\";\nimport BasePage from \"../pages/main/BasePage\";\nimport firebase from \"../config/config\";\nimport { StoreContext } from '../store/StoreContextProvider'; // It checks if the user is authenticated, if they are,\n// it renders the \"component\" prop. If not, it redirects\n// the user to /login.\n// const PrivateRoute  = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render={props =>\n//       isLoggedIn() === 'true' ? (\n//         <Component {...props} />\n//       ) : (\n//           <Redirect to=\"/auth\" />\n//         )\n//     }\n//   />\n// );\n\nconst Routes = () => {\n  const [currentUser, setCurrentUser] = useState('ok');\n  const {\n    token,\n    setToken\n  } = useContext(StoreContext); // console.log(token)\n\n  const test = () => {\n    firebase.auth().onAuthStateChanged(user => {\n      if (user) {\n        var displayName = user.displayName;\n        var email = user.email;\n        var emailVerified = user.emailVerified;\n        var photoURL = user.photoURL;\n        var isAnonymous = user.isAnonymous;\n        var uid = user.uid;\n        var providerData = user.providerData;\n        setCurrentUser(\"ok\");\n      } else {\n        setCurrentUser(\"no\");\n      }\n    });\n  };\n\n  useMemo(() => {\n    test();\n  }, []); // ถ้าล็อคอินแล้วให้ไป basepage ถ้ายัง ให้ไปหน้า login\n\n  const SecuredRoute = async () => {\n    return currentUser === \"ok\" ? /*#__PURE__*/React.createElement(BasePage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 35\n      }\n    }) : /*#__PURE__*/React.createElement(AuthPage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 50\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Router, {\n    history: history,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/logout\",\n    component: Logout,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(SecuredRoute, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    component: NotFound,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Routes;","map":{"version":3,"sources":["/Users/teem/Developer/lampang-myspace/backoffice/src/routes/Routes.js"],"names":["React","useState","useEffect","useContext","useMemo","history","Router","Route","Redirect","Switch","AuthPage","Logout","NotFound","BasePage","firebase","StoreContext","Routes","currentUser","setCurrentUser","token","setToken","test","auth","onAuthStateChanged","user","displayName","email","emailVerified","photoURL","isAnonymous","uid","providerData","SecuredRoute"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,EAAiDC,OAAjD,QAAgE,OAAhE;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,EAAkCC,MAAlC,QAAgD,kBAAhD;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,YAAT,QAA6B,+BAA7B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,MAAM;AACnB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM;AAAEkB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBjB,UAAU,CAACY,YAAD,CAAtC,CAFmB,CAGnB;;AAGF,QAAMM,IAAI,GAAG,MAAM;AACjBP,IAAAA,QAAQ,CAACQ,IAAT,GAAgBC,kBAAhB,CAAoCC,IAAD,IAAU;AAC3C,UAAIA,IAAJ,EAAU;AACR,YAAIC,WAAW,GAAGD,IAAI,CAACC,WAAvB;AACA,YAAIC,KAAK,GAAGF,IAAI,CAACE,KAAjB;AACA,YAAIC,aAAa,GAAGH,IAAI,CAACG,aAAzB;AACA,YAAIC,QAAQ,GAAGJ,IAAI,CAACI,QAApB;AACA,YAAIC,WAAW,GAAGL,IAAI,CAACK,WAAvB;AACA,YAAIC,GAAG,GAAGN,IAAI,CAACM,GAAf;AACA,YAAIC,YAAY,GAAGP,IAAI,CAACO,YAAxB;AACAb,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD,OATD,MASO;AACLA,QAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,KAbD;AAcD,GAfD;;AAiBEd,EAAAA,OAAO,CAAC,MAAM;AACZiB,IAAAA,IAAI;AACL,GAFM,EAEJ,EAFI,CAAP,CAvBmB,CA4BnB;;AACA,QAAMW,YAAY,GAAG,YAAY;AAC/B,WAAOf,WAAW,KAAK,IAAhB,gBAAuB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,gBAAsC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA7C;AACD,GAFD;;AAIA,sBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEZ,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,SAAZ;AAAsB,IAAA,SAAS,EAAEM,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF;AASD,CA1CD;;AA4CA,eAAeI,MAAf","sourcesContent":["import React, { useState, useEffect, useContext, useMemo } from \"react\";\nimport history from \"../utils/history\";\nimport { Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport AuthPage from \"../pages/auth/AuthPage\";\nimport Logout from \"../pages/auth/Logout\";\nimport NotFound from \"../pages/NotFound\";\nimport BasePage from \"../pages/main/BasePage\";\nimport firebase from \"../config/config\";\nimport { StoreContext } from '../store/StoreContextProvider';\n\n// It checks if the user is authenticated, if they are,\n// it renders the \"component\" prop. If not, it redirects\n// the user to /login.\n// const PrivateRoute  = ({ component: Component, ...rest }) => (\n//   <Route {...rest} render={props =>\n//       isLoggedIn() === 'true' ? (\n//         <Component {...props} />\n//       ) : (\n//           <Redirect to=\"/auth\" />\n//         )\n//     }\n//   />\n// );\n\nconst Routes = () => {\n  const [currentUser, setCurrentUser] = useState('ok');\n  const { token, setToken } = useContext(StoreContext)\n  // console.log(token)\n\n\nconst test = () => {\n  firebase.auth().onAuthStateChanged((user) => {\n    if (user) {\n      var displayName = user.displayName;\n      var email = user.email;\n      var emailVerified = user.emailVerified;\n      var photoURL = user.photoURL;\n      var isAnonymous = user.isAnonymous;\n      var uid = user.uid;\n      var providerData = user.providerData;\n      setCurrentUser(\"ok\");\n    } else {\n      setCurrentUser(\"no\");\n    }\n  });\n}\n\n  useMemo(() => {\n    test()\n  }, []);\n\n\n  // ถ้าล็อคอินแล้วให้ไป basepage ถ้ายัง ให้ไปหน้า login\n  const SecuredRoute = async () => {\n    return currentUser === \"ok\" ? <BasePage /> : <AuthPage />;\n  }\n  \n  return (\n    <Router history={history}>\n      <Switch>\n        <Route path=\"/logout\" component={Logout} />\n        <SecuredRoute />\n        <Route component={NotFound} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n"]},"metadata":{},"sourceType":"module"}