{"ast":null,"code":"var _jsxFileName = \"/Users/teem/Developer/lampang-myspace/backoffice/src/_metronic/layout/_core/MetronicSubheader.js\";\nimport React, { createContext, useState, useContext } from \"react\";\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\n  const result = {\n    breadcrumbs: [],\n    title: \"\"\n  };\n  const menu = document.getElementById(menuId);\n\n  if (!menu) {\n    return result;\n  }\n\n  const activeLinksArray = Array.from(menu.getElementsByClassName(\"active\") || []);\n  const activeLinks = activeLinksArray.filter(el => el.tagName === \"A\");\n\n  if (!activeLinks) {\n    return result;\n  }\n\n  activeLinks.forEach(link => {\n    const titleSpans = link.getElementsByClassName(\"menu-text\");\n\n    if (titleSpans) {\n      const titleSpan = Array.from(titleSpans).find(t => t.innerHTML);\n\n      if (titleSpan) {\n        result.breadcrumbs.push({\n          pathname: link.pathname,\n          title: titleSpan.innerHTML\n        });\n      }\n    }\n  });\n  result.title = getTitle(result.breadcrumbs, pathName);\n  return result;\n}\nexport function getTitle(breadCrumbs, pathname) {\n  if (!breadCrumbs || !pathname) {\n    return \"\";\n  }\n\n  const item = breadCrumbs.find(b => b.pathname === pathname);\n\n  if (!item) {\n    return \"\";\n  }\n\n  return item.title;\n}\nconst SubheaderContext = createContext();\nexport function useSubheader() {\n  return useContext(SubheaderContext);\n}\nexport const SubheaderConsumer = SubheaderContext.Consumer;\nexport function MetronicSubheaderProvider({\n  children\n}) {\n  const [title, setTitle] = useState(\"\");\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const value = {\n    title,\n    setTitle,\n    breadcrumbs,\n    setBreadcrumbs\n  };\n  return /*#__PURE__*/React.createElement(SubheaderContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 10\n    }\n  }, children);\n}","map":{"version":3,"sources":["/Users/teem/Developer/lampang-myspace/backoffice/src/_metronic/layout/_core/MetronicSubheader.js"],"names":["React","createContext","useState","useContext","getBreadcrumbsAndTitle","menuId","pathName","result","breadcrumbs","title","menu","document","getElementById","activeLinksArray","Array","from","getElementsByClassName","activeLinks","filter","el","tagName","forEach","link","titleSpans","titleSpan","find","t","innerHTML","push","pathname","getTitle","breadCrumbs","item","b","SubheaderContext","useSubheader","SubheaderConsumer","Consumer","MetronicSubheaderProvider","children","setTitle","setBreadcrumbs","value"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,EAAwCC,UAAxC,QAAyD,OAAzD;AAEA,OAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,QAAxC,EAAkD;AACvD,QAAMC,MAAM,GAAG;AACbC,IAAAA,WAAW,EAAE,EADA;AAEbC,IAAAA,KAAK,EAAE;AAFM,GAAf;AAIA,QAAMC,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwBP,MAAxB,CAAb;;AACA,MAAI,CAACK,IAAL,EAAW;AACT,WAAOH,MAAP;AACD;;AAGD,QAAMM,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAI,CAACM,sBAAL,CAA4B,QAA5B,KAAyC,EAApD,CAAzB;AACA,QAAMC,WAAW,GAAGJ,gBAAgB,CAACK,MAAjB,CAAwBC,EAAE,IAAIA,EAAE,CAACC,OAAH,KAAe,GAA7C,CAApB;;AACA,MAAI,CAACH,WAAL,EAAkB;AAChB,WAAOV,MAAP;AACD;;AAEDU,EAAAA,WAAW,CAACI,OAAZ,CAAoBC,IAAI,IAAI;AAC1B,UAAMC,UAAU,GAAGD,IAAI,CAACN,sBAAL,CAA4B,WAA5B,CAAnB;;AACA,QAAIO,UAAJ,EAAgB;AACd,YAAMC,SAAS,GAAGV,KAAK,CAACC,IAAN,CAAWQ,UAAX,EAAuBE,IAAvB,CAA4BC,CAAC,IAAIA,CAAC,CAACC,SAAnC,CAAlB;;AACA,UAAIH,SAAJ,EAAe;AACbjB,QAAAA,MAAM,CAACC,WAAP,CAAmBoB,IAAnB,CACI;AACEC,UAAAA,QAAQ,EAAEP,IAAI,CAACO,QADjB;AAEEpB,UAAAA,KAAK,EAAEe,SAAS,CAACG;AAFnB,SADJ;AAMD;AACF;AACF,GAbD;AAcApB,EAAAA,MAAM,CAACE,KAAP,GAAeqB,QAAQ,CAACvB,MAAM,CAACC,WAAR,EAAqBF,QAArB,CAAvB;AACA,SAAOC,MAAP;AACD;AAED,OAAO,SAASuB,QAAT,CAAkBC,WAAlB,EAA+BF,QAA/B,EAAyC;AAC9C,MAAI,CAACE,WAAD,IAAgB,CAACF,QAArB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAED,QAAMG,IAAI,GAAGD,WAAW,CAACN,IAAZ,CAAiBQ,CAAC,IAAIA,CAAC,CAACJ,QAAF,KAAeA,QAArC,CAAb;;AACA,MAAI,CAACG,IAAL,EAAW;AACT,WAAQ,EAAR;AACD;;AAED,SAAQA,IAAI,CAACvB,KAAb;AACD;AAED,MAAMyB,gBAAgB,GAAGjC,aAAa,EAAtC;AAEA,OAAO,SAASkC,YAAT,GAAwB;AAC7B,SAAOhC,UAAU,CAAC+B,gBAAD,CAAjB;AACD;AAED,OAAO,MAAME,iBAAiB,GAAGF,gBAAgB,CAACG,QAA3C;AAEP,OAAO,SAASC,yBAAT,CAAmC;AAAEC,EAAAA;AAAF,CAAnC,EAAiD;AACtD,QAAM,CAAC9B,KAAD,EAAQ+B,QAAR,IAAoBtC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,WAAD,EAAciC,cAAd,IAAgCvC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMwC,KAAK,GAAG;AAAEjC,IAAAA,KAAF;AAAS+B,IAAAA,QAAT;AAAmBhC,IAAAA,WAAnB;AAAgCiC,IAAAA;AAAhC,GAAd;AACA,sBAAO,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEC,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0CH,QAA1C,CAAP;AACD","sourcesContent":["import React, {createContext, useState, useContext} from \"react\";\n\nexport function getBreadcrumbsAndTitle(menuId, pathName) {\n  const result = {\n    breadcrumbs: [],\n    title: \"\"\n  };\n  const menu = document.getElementById(menuId);\n  if (!menu) {\n    return result;\n  }\n\n\n  const activeLinksArray = Array.from(menu.getElementsByClassName(\"active\") || []);\n  const activeLinks = activeLinksArray.filter(el => el.tagName === \"A\");\n  if (!activeLinks) {\n    return result;\n  }\n\n  activeLinks.forEach(link => {\n    const titleSpans = link.getElementsByClassName(\"menu-text\");\n    if (titleSpans) {\n      const titleSpan = Array.from(titleSpans).find(t => t.innerHTML);\n      if (titleSpan) {\n        result.breadcrumbs.push(\n            {\n              pathname: link.pathname,\n              title: titleSpan.innerHTML\n            }\n        );\n      }\n    }\n  });\n  result.title = getTitle(result.breadcrumbs, pathName);\n  return result;\n}\n\nexport function getTitle(breadCrumbs, pathname) {\n  if (!breadCrumbs || !pathname) {\n    return \"\";\n  }\n\n  const item = breadCrumbs.find(b => b.pathname === pathname);\n  if (!item) {\n    return  \"\";\n  }\n\n  return  item.title;\n}\n\nconst SubheaderContext = createContext();\n\nexport function useSubheader() {\n  return useContext(SubheaderContext);\n}\n\nexport const SubheaderConsumer = SubheaderContext.Consumer;\n\nexport function MetronicSubheaderProvider({ children }) {\n  const [title, setTitle] = useState(\"\");\n  const [breadcrumbs, setBreadcrumbs] = useState([]);\n  const value = { title, setTitle, breadcrumbs, setBreadcrumbs };\n  return <SubheaderContext.Provider value={value}>{children}</SubheaderContext.Provider>;\n}\n"]},"metadata":{},"sourceType":"module"}